services:
    postgres-events:
      container_name: event-database
      image: postgres:17.2-alpine3.21
      environment:
        POSTGRES_USER: ${POSTGRES_EVENT_USER}
        POSTGRES_PASSWORD: ${POSTGRES_EVENT_PASSWORD}
        PGDATA: "/var/lib/postgresql/data/pgdata"
      volumes:
        - ./PostgresDB/init:/docker-entrypoint-initdb.d
        - ./PostgresDB/data:/var/lib/postgresql/data
      ports:
        - "5432:5432"
      networks:
        - internal-network
  
    postgres-users:
      container_name: user-database
      image: postgres:17.2-alpine3.21
      environment:
        POSTGRES_USER: ${POSTGRES_USER_USER}
        POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
        PGDATA: "/var/lib/postgresql/data/pgdata"
      volumes:
        - ./HashDB/init:/docker-entrypoint-initdb.d
        - ./HashDB/data:/var/lib/postgresql/data
      ports:
        - "5433:5432"
      networks:
        - internal-network
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER_USER} -d postgres" ]
        interval: 5s
        timeout: 5s
        retries: 5
    
    pgadmin:
      container_name: pgadmin
      image: dpage/pgadmin4
      environment:
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        PGADMIN_CONFIG_SERVER_MODE: "False"
      volumes:
        - ./PGAdmin/pgadmin-data:/var/lib/pgadmin
      ports:
        - "5050:80"
      networks:
        - internal-network
  
    mongo:
      image: mongo
      restart: always
      ports:
        - 27017:27017
      environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example
      networks:
        - internal-network

    mongo-express:
      image: mongo-express
      restart: always
      ports:
        - 8081:8081
      environment:
        ME_CONFIG_MONGODB_ADMINUSERNAME: root
        ME_CONFIG_MONGODB_ADMINPASSWORD: example
        ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
        ME_CONFIG_BASICAUTH: false
      networks:
        - internal-network

    redis:
      image: redis:latest
      ports:
        - "6379:6379"
      environment:
        - REDIS_PASSWORD=testRedisPass
      command: ["redis-server", "--requirepass", "testRedisPass"]
      networks:
        - internal-network
networks:
  internal-network:
    driver: bridge
