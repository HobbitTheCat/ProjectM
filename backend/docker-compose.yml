services:
  postgres-events:
    container_name: event-database
    image: postgres:17.2-alpine3.21
    environment:
      POSTGRES_USER: ${POSTGRES_EVENT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_EVENT_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./PostgresDB/init:/docker-entrypoint-initdb.d
      - ./PostgresDB/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - internal-network

  postgres-users:
    container_name: user-database
    image: postgres:17.2-alpine3.21
    environment:
      POSTGRES_USER: ${POSTGRES_USER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./HashDB/init:/docker-entrypoint-initdb.d
      - ./HashDB/data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - internal-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER_USER} -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ./PGAdmin/pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - internal-network

  mongo-user:
    image: mongo
    container_name: user-data
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - ./UserDB:/data/db
    networks:
      - internal-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: 
      - redis-server
      - --requirepass
      - ${REDIS_PASSWORD}
    networks:
      - internal-network

  access-control-service:
    build:
      context: ./AccessControl2.0
    container_name: access-control
    volumes:
      - ./AccessControl2.0/.env:/app/.env
    ports:
      - "8001:8001"
    networks:
      - internal-network
    depends_on:
      postgres-users:
        condition: service_healthy

  data-process-service:
    build:
      context: ./DataProcess
    container_name: data-process
    volumes:
      - ./DataProcess/.env:/app/.env
    ports:
      - "8005:8005"
    networks:
      - internal-network
    depends_on:
      - postgres-events

  user-service:
    build:
      context: ./UserService
    container_name: user-service
    ports:
      - "8006-8006"
    volumes:
      - ./UserService/.env:/app/.env
    networks:
      - internal-network
    depends_on:
      - mongo-user
      - redis

  api-gateway-service:
    build:
      context: ./APIGateway
    container_name: api-gateway
    ports:
      - "8000:8000"
    volumes:
      - ./APIGateway/.env:/app/.env
    networks:
      - internal-network
    depends_on:
      - access-control-service
      - user-service
      - data-process-service

networks:
  internal-network:
    driver: bridge
